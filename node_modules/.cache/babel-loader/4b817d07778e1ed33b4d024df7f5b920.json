{"ast":null,"code":"var _jsxFileName = \"/Users/arjunaggarwal/Desktop/my-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport logo from \"./logo.svg\";\nimport React, { Component } from \"react\";\nimport { connect } from 'react-redux';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst axios = require('axios');\n\nexport class App extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"This is my Second Redux App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Real-time Bitcoin price\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"USD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.props.tweets\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"vertical-center\",\n        onClick: this.props.buttonClick,\n        children: \"Click to fetch price\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this);\n  }\n\n} // this is used to retrieve the store state\n\nconst mapStateToProps = state => {\n  // if(state) {\n  //   const JSONval = JSON.parse(state.bpi)\n  //   console.log(JSONval)\n  // }\n  return {\n    tweets: state ? state.tweets : []\n  };\n};\n\nconst QuoteChanger = props => {\n  _s();\n\n  useEffect(() => {\n    const timer = setTimeout(() => props.dispatch({\n      fetchTweets\n    }), 20000);\n    return () => clearTimeout(timer);\n  });\n}; // Thunk Async action\n\n\n_s(QuoteChanger, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = QuoteChanger;\n\nconst fetchTweets = () => {\n  return function (dispatch) {\n    dispatch({\n      type: \"FETCH_TWEETS_REQUEST\"\n    });\n    axios.get('https://api.coindesk.com/v1/bpi/currentprice.json').then(response => {\n      // response.data is an array of trending tweets\n      const tweets = response.data.bpi.USD.rate;\n      dispatch({\n        type: \"FETCH_TWEETS_SUCCESS\",\n        payload: tweets\n      });\n    }).catch(error => {\n      // error.message is the error description\n      dispatch({\n        type: \"FETCH_TWEETS_FAILURE\",\n        payload: error.message\n      });\n    });\n  };\n}; // this is used to retrieve the actions and dispatch them to the store\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    buttonClick: () => {\n      dispatch(fetchTweets());\n    }\n  };\n}; // Adding mapStateToProps and mapDispatchToProps into connect function\n\n\nconst AppContainer = connect(mapStateToProps, mapDispatchToProps, QuoteChanger)(App);\nexport default AppContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuoteChanger\");","map":{"version":3,"sources":["/Users/arjunaggarwal/Desktop/my-app/src/App.js"],"names":["React","Component","connect","axios","require","App","render","props","tweets","buttonClick","mapStateToProps","state","QuoteChanger","useEffect","timer","setTimeout","dispatch","fetchTweets","clearTimeout","type","get","then","response","data","bpi","USD","rate","payload","catch","error","message","mapDispatchToProps","AppContainer"],"mappings":";;;;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,WAAP;;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,OAAO,MAAMC,GAAN,SAAkBL,KAAK,CAACC,SAAxB,CAAkC;AACvCK,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF,eAUE;AAAA,kBACG,KAAKC,KAAL,CAAWC;AADd;AAAA;AAAA;AAAA;AAAA,cAVF,eAaE;AAAQ,QAAA,SAAS,EAAC,iBAAlB;AAAoC,QAAA,OAAO,EAAE,KAAKD,KAAL,CAAWE,WAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAbF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAiBD;;AAnBsC,C,CAyBzC;;AACA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AACjC;AACA;AACA;AACA;AACA,SAAO;AAACH,IAAAA,MAAM,EAAEG,KAAK,GAACA,KAAK,CAACH,MAAP,GAAc;AAA5B,GAAP;AACD,CAND;;AAQA,MAAMI,YAAY,GAAGL,KAAK,IAAI;AAAA;;AAC5BM,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMC,KAAK,GAAGC,UAAU,CACtB,MAAMR,KAAK,CAACS,QAAN,CAAe;AAAEC,MAAAA;AAAF,KAAf,CADgB,EAEtB,KAFsB,CAAxB;AAIA,WAAO,MAAMC,YAAY,CAACJ,KAAD,CAAzB;AACD,GANQ,CAAT;AAOD,CARD,C,CAUA;;;GAVMF,Y;;KAAAA,Y;;AAWN,MAAMK,WAAW,GAAG,MAAM;AACxB,SAAO,UAASD,QAAT,EAAmB;AACxBA,IAAAA,QAAQ,CAAC;AAACG,MAAAA,IAAI,EAAE;AAAP,KAAD,CAAR;AACAhB,IAAAA,KAAK,CAACiB,GAAN,CAAU,mDAAV,EACCC,IADD,CACMC,QAAQ,IAAI;AAChB;AACA,YAAMd,MAAM,GAAGc,QAAQ,CAACC,IAAT,CAAcC,GAAd,CAAkBC,GAAlB,CAAsBC,IAArC;AACAV,MAAAA,QAAQ,CAAC;AAACG,QAAAA,IAAI,EAAE,sBAAP;AAA+BQ,QAAAA,OAAO,EAAEnB;AAAxC,OAAD,CAAR;AACD,KALD,EAMCoB,KAND,CAMOC,KAAK,IAAI;AACd;AACAb,MAAAA,QAAQ,CAAC;AAACG,QAAAA,IAAI,EAAE,sBAAP;AAA+BQ,QAAAA,OAAO,EAAEE,KAAK,CAACC;AAA9C,OAAD,CAAR;AACD,KATD;AAUD,GAZD;AAaD,CAdD,C,CAgBA;;;AACA,MAAMC,kBAAkB,GAAIf,QAAD,IAAc;AACvC,SAAO;AACLP,IAAAA,WAAW,EAAE,MAAM;AACnBO,MAAAA,QAAQ,CAACC,WAAW,EAAZ,CAAR;AACC;AAHI,GAAP;AAKD,CAND,C,CAQA;;;AACA,MAAMe,YAAY,GAAG9B,OAAO,CAC1BQ,eAD0B,EAE1BqB,kBAF0B,EAG1BnB,YAH0B,CAAP,CAInBP,GAJmB,CAArB;AAMA,eAAe2B,YAAf","sourcesContent":["import logo from './logo.svg';\nimport React, { Component } from \"react\"\nimport { connect } from 'react-redux'\nimport './App.css';\nconst axios = require('axios')\n\nexport class App extends React.Component {\n  render() {\n    return(\n      <div>\n        <h1>\n          This is my Second Redux App\n        </h1>\n        <h2>\n          Real-time Bitcoin price\n        </h2>\n        <p>\n          USD\n        </p>\n        <p>\n          {this.props.tweets}\n        </p>\n        <button className=\"vertical-center\" onClick={this.props.buttonClick}>Click to fetch price</button>\n      </div>\n    )\n  }\n}\n\n\n\n\n// this is used to retrieve the store state\nconst mapStateToProps = (state) => {\n  // if(state) {\n  //   const JSONval = JSON.parse(state.bpi)\n  //   console.log(JSONval)\n  // }\n  return({tweets: state?state.tweets:[]})\n}\n\nconst QuoteChanger = props => {\n  useEffect(() => {\n    const timer = setTimeout(\n      () => props.dispatch({ fetchTweets }),\n      20000\n    );\n    return () => clearTimeout(timer);\n  });\n}\n\n// Thunk Async action\nconst fetchTweets = () => {\n  return function(dispatch) {\n    dispatch({type: \"FETCH_TWEETS_REQUEST\"})\n    axios.get('https://api.coindesk.com/v1/bpi/currentprice.json')\n    .then(response => {\n      // response.data is an array of trending tweets\n      const tweets = response.data.bpi.USD.rate\n      dispatch({type: \"FETCH_TWEETS_SUCCESS\", payload: tweets})\n    })\n    .catch(error => {\n      // error.message is the error description\n      dispatch({type: \"FETCH_TWEETS_FAILURE\", payload: error.message})\n    })\n  }\n}\n\n// this is used to retrieve the actions and dispatch them to the store\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    buttonClick: () => {\n    dispatch(fetchTweets())\n    }\n  }\n}\n\n// Adding mapStateToProps and mapDispatchToProps into connect function\nconst AppContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  QuoteChanger\n)(App);\n\nexport default AppContainer;"]},"metadata":{},"sourceType":"module"}